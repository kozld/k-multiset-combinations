stages:
  - lint
  - test
  - build
  - docker
  - package
  - deploy

variables:
  NODE_ENV: development
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  IMAGE_NAME: registry.gitlab.com/$CI_PROJECT_PATH
  HELM_RELEASE_NAME: $CI_PROJECT_NAME
  HELM_NAMESPACE: default
  CHART_PATH: deployments/helm

# Lint
lint:
  stage: lint
  image: node:20
  script:
    - npm ci
    - npm run lint

# Tests
test:
  stage: test
  image: node:20
  script:
    - npm ci
    - npm run test

# Build NestJS app
build:
  stage: build
  image: node:20
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

# Build & Push Docker image
build-push-image:
  stage: docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push $IMAGE_NAME:$IMAGE_TAG

# Package Helm chart
package:
  stage: package
  image: 
    name: lachlanevenson/k8s-helm:v3.10.2
    entrypoint: [""]
  script:
    - helm package "$CHART_PATH"
  artifacts:
    paths:
      - ${CI_PROJECT_NAME}-*.tgz

# Deploy to K8s (manual)
deploy:
  stage: deploy
  image: 
    name: lachlanevenson/k8s-helm:v3.10.2
    entrypoint: [""]
  when: manual
  only:
    - main
  environment:
    name: production
  before_script:
    - echo "$KUBECONFIG_CONTENT" > kubeconfig.yaml
    - export KUBECONFIG=$PWD/kubeconfig.yaml
  script:
    - helm upgrade --install $HELM_RELEASE_NAME ${CI_PROJECT_NAME}-*.tgz \
        --namespace $HELM_NAMESPACE \
        --set image.repository=$IMAGE_NAME \
        --set image.tag=$IMAGE_TAG \
        --create-namespace
